// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flatBuffers

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type LargeStructFB struct {
	_tab flatbuffers.Table
}

func GetRootAsLargeStructFB(buf []byte, offset flatbuffers.UOffsetT) *LargeStructFB {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &LargeStructFB{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *LargeStructFB) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *LargeStructFB) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *LargeStructFB) NestedMediumStruct(obj *MediumStructFB, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *LargeStructFB) NestedMediumStructLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *LargeStructFB) NestedSmallStruct(obj *SmallStructFB, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *LargeStructFB) NestedSmallStructLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *LargeStructFB) TestBytes(j int) int8 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt8(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *LargeStructFB) TestBytesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *LargeStructFB) MutateTestBytes(j int, n int8) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt8(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func (rcv *LargeStructFB) TestString() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func LargeStructFBStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func LargeStructFBAddNestedMediumStruct(builder *flatbuffers.Builder, nestedMediumStruct flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(nestedMediumStruct), 0)
}
func LargeStructFBStartNestedMediumStructVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func LargeStructFBAddNestedSmallStruct(builder *flatbuffers.Builder, nestedSmallStruct flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(nestedSmallStruct), 0)
}
func LargeStructFBStartNestedSmallStructVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func LargeStructFBAddTestBytes(builder *flatbuffers.Builder, testBytes flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(testBytes), 0)
}
func LargeStructFBStartTestBytesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func LargeStructFBAddTestString(builder *flatbuffers.Builder, testString flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(testString), 0)
}
func LargeStructFBEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
