// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flatBuffers

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type MediumStructFB struct {
	_tab flatbuffers.Table
}

func GetRootAsMediumStructFB(buf []byte, offset flatbuffers.UOffsetT) *MediumStructFB {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &MediumStructFB{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *MediumStructFB) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *MediumStructFB) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *MediumStructFB) TestInt32() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MediumStructFB) MutateTestInt32(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func (rcv *MediumStructFB) TestInt64() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MediumStructFB) MutateTestInt64(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

func (rcv *MediumStructFB) TestFloat() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *MediumStructFB) MutateTestFloat(n float32) bool {
	return rcv._tab.MutateFloat32Slot(8, n)
}

func (rcv *MediumStructFB) TestDouble() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *MediumStructFB) MutateTestDouble(n float64) bool {
	return rcv._tab.MutateFloat64Slot(10, n)
}

func (rcv *MediumStructFB) TestBool() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *MediumStructFB) MutateTestBool(n bool) bool {
	return rcv._tab.MutateBoolSlot(12, n)
}

func (rcv *MediumStructFB) TestBytes(j int) int8 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt8(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *MediumStructFB) TestBytesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *MediumStructFB) MutateTestBytes(j int, n int8) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt8(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func (rcv *MediumStructFB) TestString() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MediumStructFB) TestIntArray(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *MediumStructFB) TestIntArrayLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *MediumStructFB) MutateTestIntArray(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *MediumStructFB) TestNested(obj *SmallStructFB) *SmallStructFB {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(SmallStructFB)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func MediumStructFBStart(builder *flatbuffers.Builder) {
	builder.StartObject(9)
}
func MediumStructFBAddTestInt32(builder *flatbuffers.Builder, testInt32 int32) {
	builder.PrependInt32Slot(0, testInt32, 0)
}
func MediumStructFBAddTestInt64(builder *flatbuffers.Builder, testInt64 int64) {
	builder.PrependInt64Slot(1, testInt64, 0)
}
func MediumStructFBAddTestFloat(builder *flatbuffers.Builder, testFloat float32) {
	builder.PrependFloat32Slot(2, testFloat, 0.0)
}
func MediumStructFBAddTestDouble(builder *flatbuffers.Builder, testDouble float64) {
	builder.PrependFloat64Slot(3, testDouble, 0.0)
}
func MediumStructFBAddTestBool(builder *flatbuffers.Builder, testBool bool) {
	builder.PrependBoolSlot(4, testBool, false)
}
func MediumStructFBAddTestBytes(builder *flatbuffers.Builder, testBytes flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(testBytes), 0)
}
func MediumStructFBStartTestBytesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func MediumStructFBAddTestString(builder *flatbuffers.Builder, testString flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(testString), 0)
}
func MediumStructFBAddTestIntArray(builder *flatbuffers.Builder, testIntArray flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(testIntArray), 0)
}
func MediumStructFBStartTestIntArrayVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func MediumStructFBAddTestNested(builder *flatbuffers.Builder, testNested flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(testNested), 0)
}
func MediumStructFBEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
